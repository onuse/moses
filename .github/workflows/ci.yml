name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.1-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          libjavascriptcoregtk-4.1-dev
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Clippy
      run: cargo clippy --all -- -D warnings
    
    - name: Run Unit Tests
      run: cargo test --all --lib
    
    - name: Run Safety-Critical Tests
      run: |
        echo "üõ°Ô∏è Running CRITICAL safety tests..."
        cargo test --package moses-formatters safety -- --nocapture
        cargo test --package moses-core test_utils -- --nocapture
    
    - name: Run Safety Compliance Suite
      run: |
        echo "üîí Running mandatory safety compliance tests..."
        cargo test --package moses-formatters --test safety_compliance_tests -- --nocapture --test-threads=1
      env:
        RUST_TEST_THREADS: 1
    
    - name: Verify Formatter Safety Certification
      run: |
        echo "‚úÖ Verifying all formatters meet safety certification requirements..."
        cargo test --package moses-formatters generate_safety_compliance_report -- --nocapture --exact
    
    - name: Run Integration Tests
      run: cargo test --all --tests
    
    - name: Run Documentation Tests
      run: cargo test --all --doc
    
    - name: Verify No System Drive Formatting
      run: |
        echo "Verifying safety patterns..."
        ! grep -r "is_system.*false" --include="*.rs" formatters/ || echo "Pattern check passed"
    
    - name: Build (Debug)
      run: cargo build --all

  build-cli:
    name: Build CLI
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
    
    - name: Build CLI (Release)
      run: cargo build --package moses-cli --release
    
    - name: Upload CLI artifact
      uses: actions/upload-artifact@v3
      with:
        name: moses-cli-${{ matrix.os }}
        path: |
          target/release/moses
          target/release/moses.exe

  build-gui:
    name: Build GUI
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libwebkit2gtk-4.1-dev \
          libayatana-appindicator3-dev \
          librsvg2-dev \
          libjavascriptcoregtk-4.1-dev
    
    - name: Install frontend dependencies
      run: |
        cd ui
        npm ci
        npm run build
    
    - name: Build Tauri app
      run: npm run tauri build
    
    - name: Upload GUI artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: moses-gui-windows
        path: |
          src-tauri/target/release/moses.exe
          src-tauri/target/release/bundle/msi/*.msi
    
    - name: Upload GUI artifacts (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v3
      with:
        name: moses-gui-macos
        path: |
          src-tauri/target/release/bundle/macos/*.app
          src-tauri/target/release/bundle/dmg/*.dmg
    
    - name: Upload GUI artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v3
      with:
        name: moses-gui-linux
        path: |
          src-tauri/target/release/moses
          src-tauri/target/release/bundle/appimage/*.AppImage
          src-tauri/target/release/bundle/deb/*.deb